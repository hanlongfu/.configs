# Vim Katas

## Exercise 0: Align Text

```

Lorem=ipsum
dolor  =somethingInTheWay
amet+= conseectetur= ahdiipiscign
ut &&= labore

Loremipsum # comment 1
dolor      somethingIjTheWay # comment 2

$names = array(
    'bill', 'samantha', 'ray', 'ronald',
    'mo', 'harry', 'susan', 'ted',
    'timothy', 'bob', 'wolverine', 'cat',
    'lion', 'alfred', 'batman', 'linus',
);

{
one=>1, two=>2,
    three=>3, four=>4
}

let x = 10 // this is a variable
let longername = 20 // another variable
let z = 30 // Final variable


name,age,city
John Smith,34,New York
Mary Johnson,28,Los Angeles
Robert,45,Chicago

| Header 1 | Header 2 | Header 3 |
| --- | --- | --- |
| Data | More data | Even more |
| Even longer data | Short | Last cell |

function add(a, b) { return a + b; }
function subtract(a, b) { return a - b; }
function multiply(a, b) { return a * b; }


{
  "name":       "John",
  "age":        42,
  "occupation": "Developer",
  "address":    {
  "street":     "123 Main St",
  "city":       "Anytown"
  }
}

```

Notes:

- ``:Tabular /=/ ``	      Align on the first = character
- ``:Tabular /:/``	      Align on : (useful for YAML, JSON, etc.)
- ``:Tabular /\s\+/``	      Align on one or more spaces
- ``:Tabular /->/``	      Align on the arrow ->
- ``:Tabular /=\+/``	      Align on one or more equal signs (e.g. ===)
- ``:Tabular /\/\//``         Align on the comment markers (`//`)
- ``:Tabular /,/r1c1l0``      First align on comma (`/,/`), then right-align the first field  with padding `r1`, then center-align the second field with padding `c1`, lastly left align the third field with no padding `l0`
- ``:Tabular /|/l1``          Align on `|`, then align left for first field,`l1`, (default the first rest, usually left)
- ``:Tabular /[(),{}]/l0``    Align on multiple delimiters: `(),{}`

common patterns
- ``:Tabular /|/l1c1l0``            markdown table 
- ``:Tabular /:\zs/``               json-like data 
- ``:Tabular /\S\+\zs\s*\/\//l0l1`` code comment





### Exercise 1: Move around

You can move around:
- `H` - move to the top of the screen
- `M` - move to the middle of the screen
- `L` - move to the bottom of the screen
- `zz` - scroll the current line to the center of the screen
- `zt` - scroll the current line to the top of the screen
- `zb` - scroll the current line to the bottom of the screen
- `50%` - move to the 50% position of the current buffer
- `<C-d>` - move half page down
- `<C-u>` - move half page up
- `<C-f>` - page down
- `<C-b>` - page up
- `gf` - go to the file (when cursor is on filename)  
- `gx` - go to an url
- `gi` - go to where a text was last inserted and enter insert mode (!important)

https://www.google.com
`gf` to go to a particular file

vim_katas1.md
vim_katas.md






### Exercise 2: Basic Editing

Change this text:

```javascript
var foo = "method("+argument1+","+argument2+")";
```

to this:

```javascript
var foo = "method(" + argument1 + "," + argument2 + ")";
```

Steps:

1. find "+" with `f+`
2. delete and switch to insert mode with `s`
3. Type `+`
4. Leave insert mode
5. find the next "+" with `;`
6. Repeat with `.`

Notes:

search movements
- `f {char} ` - find the next occurrence of `char`
- `t {char} ` - find till the next occurrence of `char`
- `F {char}` - find the previous occurrence of `char`
- `T {char}` - find till the previous occurrence of `char`
- `;` - repeat f or t action forward
- `,` - repeat f or t action backward
- `n` - repeat last search in the same direction
- `N` - repeat last search in the opposite direction
- `*` - current word under or in front of cursor (forward) - bounded, i.e, only the word (or bounded by delimiters)
- `g*` - current word under or in front of cursor (forward) - unbounded, i.e., including words containing the word inside
- `#` - current word under or in front of cursor (backward) - bounded
- `g#` - current word under or in front of cursor (backward) - unbounded
- `<leader>f/F {char}{char}` - search forward and backward (through leap.nvim plugin)






### Exercise 3: Operator + Text Objects = Action

Vim Operators
: When vim operator is invoked in duplicate, it acts upon the current line except `gu`, `gU`, `gc`, `g~`.
use `guu`, `gUU`, `gcc`, `g~~` to act on current line

- `c` - change
- `d` - delete
- `y` - yank into register
- `g~` - swap case (not often used)
- `gu` - make lower case
- `gU` - make upper case
- `gc` - comment
- `v` - select
- `>` - shift right
- `<` - shift left
- `=` - autoindent
- `!` - filter {motion} lines through an external program
- `ys` - add delimiter (plugin)
- `cs` - change delimiter (plugin)
- `ds` - delete delimter (plugin)

Text Objects (see nvim-various-textobjs for more text objects)

- `at / it` - a block surrounded by html tag, including or excluding the tags
- `aw / iw` - a word including or excluding white space
- `ap / ip` - a paragraph including or excluding the surrounding white space
- `as / is` - a sentence including or excluding the surrounding white space

Ex1: Try out the following operator + text objects:

- `guap`, `=ap`, `cap` `gcap` `dap` , `yap`, `>ap`- work on a paragraph (notice that `p` only works in this context)
- `guiw`, `ciw`, `daw`, `yaw`, `>aw`, `g~iw` - work on a word (`>aw` or `<iw` acts on the current line)
- `gu(`, `v(`, `y{`, `d(`, `c{`, `d[`, `>{`, `>(`, `>[` 

Ex2: Try out the following operator + additional text objects (see `nvim-various-textobjs` plugin)

Frequently used

- `gG` - entire buffer. try `gUgG`, `gcgG`, `>gG`, `=gG`, `dgG`
- `C` - from cursor to next closing ], }, ). try `dC` (on the same line)
- `Q` - from cursor to next unescaped quotes `" '   try`dQ`.
- `ii` - [i]nner [i]ndentation, a block with the same or lower indentation level
- `ai` - [a]round [i]ndentation, a block with the same or higher indentation level (one level up). try `cii`, `vii`, `gcai`
- `ag/ig` - outer indentation (including blank lines), useful to get functions with annotations. try `vag`, `>ig`, `=ag`
- `dsi` - (not a text object by itself) delete line before and after (surrounding) indented block
- `gw`- all lines visiable in the current window
- `gW`- from the cursor line to the last in the window
- `g;` - last non-deletion change, yank or paste
- `iC/aC` - markdown fenced code block. try `diC`, `yaC`

less Frequently used

- `iD/aD` - double square brackets (`[[]]`)
- `|` - column down until indent or shorter line. try: `gU|`, `d|`, `c|`
- `R` - lines down with same or higher indentation
- `ik/ak` - key of key-value pair
- `iv/av` - value of key-value pair
- `n` - from cursor to end of line (minus the last char)
- `L` - url. try `dL`, `cL`, `ysL"`
- `in` - numbers, only digits
- `an` - numbers, including minus, and decimal point
- `iy/ay` - python strings surrounded by three quotes (''', """)
- `ie/ae` - markdown text enclosed by `\*, \*\*, *, \_\_, ~~, ==`

```markdown
_this is some_
**this is something else**
_what you like_
**what you like**
~~what you like edited something here~~
==what you like==
```

'''
This is python docstring
This is python docstring
This is python docstring
This is python docstring
'''


```bash
  #!/bin/bash
  #some code
  [[ cmd ]] ="cat file2 | grep ':'  | awk -F \":\" '{print \$1}' > pool_names"
  echo $cmd
  exec $cmd
```

```python
def square(x):
    if x == y:
        print(x)
    else:
        return x * x

# before
if foo then
	print("bar") -- <- cursor is on this line
	print("baz")
end

# after
print("bar")
print("baz")
```

```lisp
(defun save-rewindable-state (rewindable object)
   (let ((index (rewind-index rewindable))
         (store (rewind-store rewindable)))
     (unless (zerop index)
       ;; Reverse the tail of pool, since we've
       ;; gotten to the middle by rewinding.
       (setf (subseq store index) (nreverse (subseq store index))))
     (vector-push-extend object store)))
```

```json
{
  "name"  : "Jason",
  "age"   : 30,
  "height": 180,
  "weight": 75,
  "email" : "jason@gmail.com"
}
```

```text
here is the precision level: 0.007,
here is a number to consider: -215
here is an url: "https://www.google.com"
```

```python
## try `dR`
def square(x):
  if x = 10:
    print(x)
  else:
    return x * x
y = square(10)
print(y)
```



### Exercise 4: Operator + Motions = Action

Vim Operators
: When vim operator is invoked in duplicate, it acts upon the current line except `gu`, `gU`, `gc`, `g~`.
use `guu`, `gUU`, `gcc`, `g~~` to act on current line

- `c` - change
- `d` - delete
- `y` - yank into register
- `g~` - swap case
- `gu` - make lower case
- `gU` - make upper case
- `gc` - comment
- `v` - select
- `>` - shift right
- `<` - shift left
- `=` - autoindent (automatically indent the whole file `gg=G`)
- `!` - filter {motion} lines through an external program
- `ys` - add delimiter (plugin)
- `cs` - change delimiter (plugin)
- `ds` - delete delimter (plugin)

Vim Motions

- `h, j, k, l`
- `w/W` - move to start of next word or WORD
- `e/E` - move to end of word or WORD
- `b/B` - move to start of previous word or WORD
- `0/$`- start of line, end of line
- `^/_` - first none-blank char of line
- `gg/G` - first and last line of document
- `(/)` - move up one sentence, move down one sentence
- `{/}` - move up one paragraph, move down one paragraph
- `f/F` - move to next occurence, move to previous occurrence (on the same line)
- `t/T` - move till next occurrence, move till previous occurrence (on the same line)
- `%` - move to matching parenthesis/bracket
- `H/M/L` - move to the top line, middle line, bottom line of the screen
- `/pattern` - search forward for pattern
- `?` - search backward for pattern
- `n` - repeat last search in the same direction
- `N` - repeat last search in the opposite direction
- `gf` - [g]o to [f]ile (when cursor is on filename)
- `gi` - [g]o to [i]nsert (go to where a text was last inserted and enter insert mode).
- `gI` - go to implementation (needs to be in actual code to make it work) in `nvim-lspconfig`
- `gd/gD` - move to local definition, move to declaration in `nvim-lspconfig`
- `gM` - move to the middle of the line
- `gm` - move to the middle of the screen
- `]}` - move to next unmatched `}` unmatched means cursor is between the delimters
- `])` - move to next unmatched `)`
- `[{` - move to previous unmatched `{`
- `[(` - move to previous unmatched `(`

the following are not technically motions, but are very useful for searching

- `*`- search forward with word under cursor bounded
- `g*` - search forward with word under cursor unbounded
- `#` - search backward with word under cursor bounded
- `g#` - search backward with word under cursor unbounded

Ex1: Try out the following operator + motion:
`gUw`, `gc3j`, `cG`, `dH`, `gU(`, `d/paren` , `ct,`, `>)`, `>}`, `=)`, `ggdG`, `ggvG`, `d]}`, `d])`, `y_`, `d$`
`>2j`, `gU%`, `cl`, `gg=G`

Ex2: add delimiter to the following

1. add double quotes to the email address. (hint: place cursor on `j`, and use `ys$"`)
   "name": jason@gmail.com

2. add double quotes to the text. (hint: place cursor on the last char, and use `ys_"`)
   "she said: I don't think you like me"

Ex3: go to file by using `gf`
04_operator_plus_txtobjs.md
05_find_and_replace_by_hand.md

Ex4: go to unmatched `}` or `)`, or `]` (cursor in the middle),

- go forward `]}`, '])'
- go backward `[(`, `[{`

{
this is some text
some more text
even more text  
}

(
this is some text
some more text
even more text  
)

[
this is some text
some more text
even more text
]

Notes:
Declaration, Definition, Implementation
(declaration < definition < implementation)

```java
// declaration
int add(int a, int b);

// definition
int x = 5;

// interface: definition without implementation
interface Drawable {
    void draw();
}
// definition and implementation are the same
int add(inta, int b){
    return a + b;
}
```



### Exercise 5: Find and replace by hand

Replace the first and third occurrence of "content" with "copy" in this text:

```text
"...We're waiting for content before the site can go live...

...If you are content with this, let's go ahead with it...

...We'll launch as soon as we have the content...”
```

Steps:

1. Find the word content by `/content`
2. Replace the word by `cw copy`
3. Go to the next one `n`
4. Go to the last one `n`
5. Repeat command `.`

Notes:
`/` is equivalent to `g*`
`?` is equivalent to `g#`

`*` - current word under or in front of cursor (forward) - bounded, i.e, only the word (or with delimiters)
`g*` - current word under or in front of cursor (forward) - unbounded, i.e., including words containing the word inside
`#` - current word under or in front of cursor (backward) - bounded
`g#` - current word under or in front of cursor (backward) - unbounded

### Exercise 6: Buffers, Windows, Tabs

Buffer: in-memory space. Each open file is bound to a buffer. Three open files mean three buffers.
Window: What buffer is viewed through. You can have multiple windows displaying the same buffer, or you can view multiple buffers through one window (split windows).
Tabs: Collection or layout of windows. When you close a window or tab, the data in buffer are still there.

buffer

`:e filename` - edit a file in a new buffer
`:ls` - list all open buffers
`:vert ba` - open all buffers as vertical windows
`:hori ba` - open all buffers as horizontal windows
`:tab ba` - open all buffers as tabs

`:b #` - go to a specific buffers
`:bf` - go to first buffer
`:bl` - go to last buffer
`:bn` - go to next buffer
`:bp` - go to previous buffer
`:bd` - delete a buffer

Through bufferline plugin
`<leader>bx` - close current buffer
`<leader>bl` - pick a buffer
`<leader>bo` - close all other buffers except current

Windows

filename optional - without it, only split window
`:vs {filename}` - split window vertically
`:sp {filename}` - split window horizontally

below are less versatile than above because you can't open a specific file

`<C-w>v` - split window veritically -- mapped to `<leader>vs`
`<C-w>s` - split window horizontally -- mapped to `<leader>hs`
`<C-w>=` - make split windows equal width -- mapped to `<leader>es`
`<C-w>c` or `:close`- close current split window -- mapped to`<leader>cs`

`<C-w> +/-` - increase or decrease height, try `20<C-w>+`
`<C-w> >/<` - increase or decrease width, try `30<C-w><`

Tabs (rarely used)

`:tabnew` - open new tab
`:tabn / gt` - go to next tab -- mapped to `<tab>`
`:tabp / gT` - go to previous tab -- mapped to `<s-tab>`
`:tabc` - close the current tab page and its windows (if it is not the last tabpage)
`:tabo` - keep the active tabpage, closing all others

### Exercise 7: Exiting and Saving in Vim

single buffer

`:update` - save without quitting (only update if they are changes)
`:q!` or `ZQ` - quit without saving current buffer (normal mode only)
`:q` - quit (must have saved first)
`:w` - save
`ZZ` or `:x` or `:wq` - save and quit
`:saveas filename` - save as a file

multiple buffers

`:qa!` - force quit all open buffers without saving changes
`:qa` - save all and quit
`:wa` - write changes to all buffers to disk
`:wqa` - save and quit on all open files

### Exercise 8: Navigate directories and files

Use Nvim Tree plugin - more convenient

- `<leader>ee` - toggle nvim-tree panel
- `<leader>ec` - collapse nvim-tree explorer
- `<leader>ef` - toggle nvim-tree panel on current file
- `<leader>er` - refresh nvim-tree
- `a` - create file or directory
- `c` - copy
- `p` - paste
- `P` - parent directory (move cursor to parent directory)
- `d` - delete
- `e/r` - rename
- `R` - refresh

Alternatively, use Telescope File Browser plugin - more versatile

- `<leader>fb` - open telescope file browser
- In normal mode:
- `c` - create
- `r` - rename
- `m` - move
- `y` - copy
- `o` - open
- `g` - go to parent directory (very useful)
- `e` - go to home directory (very useful)
- `h` - toggle hidden (very useful)
- `s` - toggle all entries (very useful)
- `f` - toggle between file and folder browser
- `t` - change nvim's current working directory to selected parent
- `<Tab>` - toggle selection and move to next selection
- `<S-Tab>` - toggle selection and move to prev selection

### Exercise 9: Fuzzy search using Telescope

frequently used

`<leader>sf` - [s]earch [f]iles
`<leader>sg` - [s]earch string by [g]rep
`<leader>sw` - [s]earch current [w]ord under cursor
`<leader>sb` - [s]earch existing [b]uffers

less frequently used

`<leader>sd` - [s]earch [d]iagnostics
`<leader>sh` - [s]earch [h]elp
`<leader>sk` - [s]earch [k]eymaps
`<leader>ss` - [s]earch [s]elect telescope
`<leader>sr` - [s]earch [r]ecent files
`<leader>so` - [s]earch by grep in [o]pen files
`<leader>sc` - [s]earch fuzzily in the [c]urrent buffer
`<leader>sn` - [s]earch [n]eovim files

search activity history

`<leader>u` - brings up undo tree

### Exercise 10: Use count

Change this text:

```css
.blog,
.news {
  background-image: url(/sprite.png);
}
.blog {
  background-position: 0px 0px;
}
```

to this:

```css
.blog,
.news {
  background-image: url(/sprite.png);
}
.blog {
  background-position: 0px 0px;
}
.news {
  background-position: -180px 0px;
}
```

Moves:

1. `yyp` to duplicate the last line
2. `cW.news<Esc>` to replace the word 'blog' with 'news'
3. `180<C-x>`

### Exercise 11: Search and substitute text

Before

```text
Replace content with content in this line.
And content in this line.
Perhaps one more content line here.
```

After

```text
Replace concept with concept in this line.
And concept in this line.
Perhaps one more concept line here.
```

Notes

`:%s/old/new/g` - Replace all occurrences of “old” with “new” in whole file
`:%s/old/new/gc` - Replace all occurrences of “old” with “new” in whole file, asking for confirmation
`:%s/old/new/gi` - Replace all occurrences of “old” with “new” in whole file, ignoring case

`g&` - repeat last substitution on all lines (if there was a substitution, it will be applied to all lines in the file). - `g` means global - `&` repeats the last substitution command

`%` - all lines
`.` - current line

### Exericse 12: Combine and conquer

Use this text for practicing:

```text
This is some text, I hope you like it.
  one more
 and more
```

Do the following exercises on it:

`2cw` - change 2 words
`2dw` - delete 2 words
`2yw` - yank 2 words into register
`g~` - swap case
`gu` - make selection all lower case
`gU` - make selection all UPPER case
`>` - shift right (followed by a motion)
`<` - shift left
`=` - auto indent

### Exercise 13: Delete in insert mode

```text
This is again some text.
```

Type the sentence again and practice these:

`<C-h>` - delete back 1 char
`<C-w>` - delete back 1 word
`<C-u>` - delete back to the start of the line
`<C-r>0` - paste from yank register (insert mode)

```text
This is again
```



### Exercise 14: Search by Vim[grep]

```text
Here is some echo here.
Here is another echo by echo; If you know what echo is.
Here is even more echo.
```

Notes:

`vim[grep] /pattern/{file1, file2...}` - search for the pattern in multiple files
`vim /echo/g %` - search for echo string inside the current open buffer.  
`vim /echo/g **/*` - search for echo string inside the project directory
`vim /echo/ **/*.md` - search for echo string in all markdown files in the project directory

Returned search results are stored in the quickfix list
`:copen | :cw` - to open the quickfix list where the returned matches are stored
`:ccl | :q` - to close the quickfix list
`:cnext | :cprev | :cfirst | :clast` - to go to next, previous, first, or last item in the quickfix list




### Exercise 15: Paste from register in insert mode

Here is an unfinished excerp of text:

```text
Practical Vim, by Drew Neil
Read Drew Neil's
```

Copy and paste the page title here:

`yt,` - yanks the text 'Practical Vim
`jA ` - jumps to the end of the second line and adds a space
`<C-r>0` - pastes the text from register
`.<Esc>` - adds the dot to the very end

Make it look like this:

```text
Practical Vim, by Drew Neil
Read Drew Neil's Practical Vim.
```

Notes:
`<C-r>{register}` allows us to paste from register in insert mode




### Exercise 16: Back of envelope calcuations in place

Suppose that we've just typed the following:

```text
6 chairs, each costing $35, totals $
```

`A` - append mode
`<C-r>=6*35` - put the calculation result in register
`<CR>` paste the result at the cursor

You should get this:

```text
6 chairs, each costing $35, totals $210
```





### Exercise 17: Editing tricks

```text
Tabs aer numbered starting from 2. We can switch between tabs with the {N}gt command,
which can be remembered as goto tab {N}. When this command is prefixed with a number,
Vim jumps to the specified tab, but if the number is omitted, Vim advances to the next tab.
The gT command does the same but in reverse.

```

Notes:

1. switch the position of e and r in `aer` using `xp`.
2. append to the end of a word using `ea`.
3. append to the end of previous word using `gea`.
4. append to the end of previous WORD using `gEa` .

5. `w/W` - move forward to the start of word or WORD
6. `b/B` - move backward to the start of word or WORD

7. `e/E` - move forward to end of word or WORD
8. `ge/gE` - move backward to end of word or WORd

9. `)` - move to the next sentence
10. `(` - move to the prev sentence

11. `}` - move to the next paragrah
12. `{` - move to the prev paragrah




### Exercise 19: Overwrite existing text

Example text:

```text
Typing in insert mode extends the line. But in replace mode
the line length does not change.
```

Change the ". But" to ", but" in replace mode

`f.` - find the dot
`R, b<Esc>` - enter into replace mode, replace . with comma, space and replace "B" with "b"

`gR` triggers the Virtual Replace Mode, which is better, as that handles the tab spaces.





### Exercise 20: Grokking visual mode

Given the following text:

```text
I like March better than anything.
```

Change the word "March" to "April"

Use `jfM` to jump to the beginning of "March"
Visually select the word with `viw`
Hit `c` to change selection
Type `April<Esc>` to add the word "April"



### Exercise 21: Defining visual selection

There are 3 visual modes:
`v` - characterwise
`<C-v>` - block
`V` - linewise

`gv` - reselect last visual mode
`o` - go to the end of the highlighted text in visual mode

Practice those on this block of text:

```text
This is some text.
Another one is right here.
Here is more and more text.
```



### Exercise 22: Repeat likewise visual commands

Suppose we have this Python code:

```python
def fib(n):
    a, b = 0, 1
    while a < n:
print a,
a, b = b, a+b
fib(42)
```

Set `:set shiftwidth=4 softtabstop=4 expandtab`

`Vj` - Visually select the line
`>..`- Indent the text and repeat

The result should look like this:

```python
def fib(n):
    a, b = 0, 1
    while a < n:
        print a,
        a, b = b, a+b
fib(42)
```




### Exercise 23: Prefer operators to visual commands

Change the text in the tags to be upper-case.

```html
<a href="#">one</a>
<a href="#">two</a>
<a href="#">three</a>
```

`{start}` - on the first line, first char
`gUit` - make the word inside the tag ('it' ~ inside tag) upper case
`j.` - go to next line and repeat
`j.` - go to next line and repeat

This is what the HTML snippet should look like:

```html
<a href="#">ONE</a>
<a href="#">TWO</a>
<a href="#">THREE</a>
```

`gU{motion}` - visual mode equivalent in normal mode




### Exercise 24: Editing tabular data with visual block mode

Change this text:

```
Chapter            Page
Normal Mode          15
Insert Mode          31
Visual Mode          44
```

Make it look like this

```
Chapter      | Page
-------------------
Normal Mode  |   15
Insert Mode  |   31
Visual Mode  |   44
```

`<C-v>3j` - block select the column to the point we need to delete back
`d...` - delete the columns
`gv` - reselects the same visual selection
`r|` - repeats adding the pipe
`yyp` - duplicate the first row
`Vr-` - select the entire line, repeat the "-" for the row

In the visual block mode, `I`, `A` tells Vim to insert text at the beginning/end of every line in the block.
However, `i`, `a` only inserts or appends at the cursor, not across lines




### Exercise 25: Changing column of text

Suppose there is this text:

```css
li.one a {
  background-image: url("/images/sprite.png");
}
li.two a {
  background-image: url("/images/sprite.png");
}
li.three a {
  background-image: url("/images/sprite.png");
}
```

Change 'images' to 'components' to look like this:

```css
li.one a {
  background-image: url("/components/sprite.png");
}
li.two a {
  background-image: url("/components/sprite.png");
}
li.three a {
  background-image: url("/components/sprite.png");
}
```

Steps to get there:

`<C-v>jje` - visual select the entire block
`c` - change the selection
`components` - type in the text 'components'
`<Esc>` - add the word 'components' to the other lines
Note, `<C-c>` is not `<Esc>` :-(




### Exercise 26: Append after a ragged visual block

We already had this text before:

```javascript
var foo = 1;
var bar = "a";
var foobar = foo + bar;
```

Append ';' at the end of each line using visual mode.

Start on the first line, at "1"
`<C-v>jj$`
`A;` - appends the ';' at the end of each line
`<Esc>` - will apply it for each selected line




### Exercise 27: Neogit and Diffview

Neogit

`<leader>gh` or `<leader>gs` - enter neogit buffer

Popups (in Neogit buffer)
`?` - help
`A` - cherrypick
`B` - bisect
`b` - branch
`c` - commit
`d` - diff
`f` - fetch
`i` - ignore
`l` - log
`m` - merge
`M` - remote
`p` - pull
`P` - push
`r` - rebase
`t` - tag
`v` - revert
`w` - worktree
`X` - reset
`Z` - stash

Diffview

`<leader>df` - open diff view
`<leader>dF` - close diff view






### Exercise 28: Exec commands on one or more consecutive lines

Look at this HTML sample:

```html
<!DOCTYPE html>
<html>
  <head>
    <title>Practical Vim</title>
  </head>
  <body>
    <h1>Practical Vim</h1>
  </body>
</html>
```

Do the following exercises on the text above:

`:7` - move to line 7
`:print` print current line
`:9p` - move to line 9, print it
`:10d` - move to line 10 and delete it in 1 command
`:8,11p` - print range
`:.,$p` - print from current line ('.') to the end ('$')
`:%p` - % means the entire file
visual select multiple lines, `:'<,'>p` - prints the visual selection
`:/<html>/,/<\/html>/p` - print out everything within html
`:/<html>/+1,/<\/html>/-1p` - without the html tags

Notes:

- there should be a space between the register name and the command
- no space needed between range/line and command
- delete > d, yank > y, move > m, join > j, put > p, copy > co, substitute > s, global > g, (normal have to be spelled out)
- `p` could mean put/paste or print. if there is register after `p`, then it is put; if there is nothing after p, it is print.

`{range}delete {x}` - delete specific lines into register X, try `:10,11delete x`
`{range}yank {x}` - yank specific lines into register X, try `1,$yank x`
`{line}put {x}` - put the text from register x after the specified line, try `:12put x`

- the following are interchangeable
  `{range}copy {address} ` - copy the specified lines to below the line specified, try `:10,12copy$`
  `{range}t{address}` - copy the specified line to below the line specified, try `:37,38t$`

`{range}move {address}` - move the specified lines to below the line specified, try `:10,11move$`
`{range}join` - join the specified lines, try `:8,12join`
`{range}normal {command}` - execute normal command on each specified line, try `:1,10normal A;`
`{range}substitute/pattern/replacement/{flag}` - replace the pattern with replacement on each specified line, try `:%s/Practical Vim/Something/g`
`{range}global/pattern/{cmd}` - execute the Ex command on all specified lines where the pattern matches (default range is current file), try `:g/re/p`

`.` - current line cursor is on
`%` - all lines in current buffer
`*` - all files in the current directory.
`**` - subdirectories, `**/*` - include all files in subdirectories

`:args *` - open all files in the current directory
`:args **/*` - open all files in the current directory including subdirectories
`:argdo %s/pattern/replacement/g | { update }` - substitute across all files in the current directory (open all files first, use `update` if you want to save the changes)




### Exercise 29: Duplicate or move lines

Given this text:

```
Shopping list
    Hardware store
        Buy new hammer
    Beauty parlor
        Buy nail polish remover
        Buy nails
```

Do the following exercises on the text above:

Start at 'H' on line 7
`:11copy.` - copies line 11 to below current line
`:11t.` - should do the same
`:t.` - duplicate current line
`:t$` - copy current line to end of file
`:t0` - copy current line to the top of the file
`:6t.` - copy line 6 to just below the current line

general format: `:[range]move[address]`
`:11m$` - move line 11 to the end of the file
Visual select 2 lines
`:'<,'>m$` move the selected lines to the end of the file




### Exercise 30: Run normal mode commands across range

There is a block of text like this:

```javascript
var foo = 1;
var bar = "a";
var baz = "z";
var foobar = foo + bar;
var foobarbaz = foo + bar + baz;
```

`A;<Esc>` - Add semicolon to the end of first line
Visual select the rows
`:'<,'>normal.` - repeats the command for all highlighted lines

or solve it like this:
`:'<,'>normal A;` - executes normal command for all highlighted lines

Add semi-colon to all lines in file:
`:%normal A;`

Comment out an entire JS file:
`:%normal i//`



### Exercise 31: Repeat last ex command

`:bn` - move to the next buffer
`@:` - repeat last ex command
`@@` - repeat last ex command

Notes:
`.` - repeat last normal mode command
`@:` - repeat last Ex command (commandline command), like `@@`
`:` - this register holds the most recent commandline command




### Exercise 32: Tab complete your ex command

Type this in the command menu:

`:col<C-d>`

The options 'colder colorscheme should be displayed
Alternatively, `col<tab>`



### Exercise 33: Insert current word at the command prompt

Rename the variable 'tally' to 'counter':

```javascript
var tally;
for (tally = 1; tally <= 10; tally++) {
  // Do something with tally
}
```

Start on line 6 at the 't' character
`*` - selects all the words 'tally'
`cwcounter<Esc>` - replaces the word with counter
`:%s//<C-r><C-w>/g` - gets the current word for the substitute command




### Exercise 34: Add/change/delete surrounding delimiter pairs with ease using nvim_surround

`ys {motion} {char}` - add delimters
`ds {char}` - delete delimters
`cs {target} {replacement}` - change delimiters

Add delimiters to multiple words

- select the words, then `S<delimiter>`

add delimiters to these words  --> "add delimiters to these words"

Add delimters to single words

addparenthesis --> (addparenthesis)

- use `ysiw)` to add parens

adddoublequotes --> "adddoublequotes"

- use `ysaw"` - surround WORD with double quotes

addanglebrackets --> {addanglebrackets}

- use `ysiw}`

Delete delimiters

[delete brackets] --> delete brackets

- use `ds]`

< tag > --> tag

- use `ds<`

<tag> delete the tag </tag> --> delete the tag

- use `dst` - place cursor on the enclosed text

Change delimiters

'change to double quote' --> "change to double quote"

- use `cs'"`

<h4> change to h4 </h4>   --> <h4> change to h4 </h4>

- use `csth4`





### Exercise 35: Running commands in shell

1. Combine two commands with one shell execution:

`:write !sh` - will write this file (a vim command) and start a shell

2. Sort the content of this text:

```
first name, last name, email
john,smith,john@example.com
drew,neil,drew@vimcast.org
jane,doe,jane@example.com
```

Visual highlight the lines to be sorted
`:'<,'>!sort -t',' -k2` - the sort shell command is used to sort the lines

3. Pull up command history in vim

`q:` will show normal mode history (hit `Esc` twice to exit command line history)
`q/` will show search history



### Exercise 36: Run Multiple Ex Commands as a Batch

```html
<ol>
  <li>
    <a href="/episodes/show-invisibles/"> Show invisibles </a>
  </li>
  <li>
    <a href="/episodes/tabs-and-spaces/"> Tabs and Spaces </a>
  </li>
</ol>
```

Question 1: Turn above html into plain text?

Multiple Ex commands can be saved as `.vim` file and source it in vim to run

```vim
global/href/join
vglobal/href/delete
%normal A; http://vimcasts.org
%normal yi"$p
%substitute/\v^[^\>]+\>\s//g
```

Question 2: Turn multiple files into plain text?

1. open the files: `:args *`, or `:vim *.html`
2. use `argdo` command:argdo source batch.vim`



### Exercise 37: Indent with ease

```text
This is some text
    This is some text
This is some text
        This is some text

{
This is text inside a curly brace.
    This is another line of text.
        This is even more text.
    This is fourth line of text.
}
```

```python
def square(x, y):
    if x > y:
        return false
    else:
        result = x ** y
```

return result

1. copy `return result` to below `result = x ** y`
2. `]p` to paste below and adjust indent to current line

Notes:
`>>` - indent current line by one shiftwidth
`<<` - remove indent of current line by one shiftwidth
`>.` - indent twice

indent + motion
`>3j` - indent three lines
`>G` - indent from current line to the eof

indent a block
`>%` - indent a block with `()` or `{}` (cursor on brace)
`<%` - remove indent of a block wiith `()` or `{}` by one shiftwidth (cursor on brace)

indent inner block
`>ib` - indent inner block by one shiftwidth (cursor on brace)
`<ib` - remove indent of inner block by one shiftwidth (cursor on brace)
`>at` - indent a block with <> tags

reindent: `=`
`3==` - reindent 3 lines
`=%` - reindent a block with () or {} (cursor on brace)
`=iB` - re-indent inner block with () or {}

`]p` - paste and adjust indent to current line (!important)




### Exercise 38: LSP Related Movements (through nvim-lspconfig plugin)

```python
def square(x):
    return x * x

result = square(10)
print(result)

```
```c
#include <stdio.h>
int main() {
    int number;

    printf("Enter an integer: ");

    // reads and stores input
    scanf("%d", &number);

    // displays output
    printf("You entered: %d", number);

    return 0;
}
```

LSP movements

`gd` - go to definition, `<C-t>` to jump back
`gr` - go to references
`gI` - go to implementation (`gi` goes to where a text was last inserted)
`gD` - go to declaration (not all supported)
`<leader>D` - type definition (useful if you don't know what the variable is)
`<leader>ds` - document symbols (fuzzy find all the symbols in current doc)
`<leader>ws` - workspace symbols (fuzzy find all the symbols in current dir)
`<leader>rn` - rename variable under cursor (not all supported)
`K` - opens a popup that display documentation about the word under cursor

Parenthesis, Curly braces, Methods movement

`%` - move to the matching paren or brace
`]m` - move to the next start of method (delimited by `{}`)
`[m` - move to the prev start of method (delimited by `{}`)
`]M` - move to the next end of method (delimited by `{}`)
`[M` - move to the prev end of method (delimited by `{}`)
`]} / ])` - move to the next unmatched `}` or `)` - 'unmatched' means in the middle of some code
`[{ / [(` - move to the prev unmatched `}` or `)`

Through outline plugin
`<leader>o` - open an outline of symbols in the code



### Exercise 39: Split windows

All about split windows

`<C-w>v` - Divide the window vertically
`<C-w>s` - Divide the window horizontally

Switch between windows:
`<C-w>w` - cycle open windows
`<C-w>h`, `<C-w>j`, `<C-w>k`, `<C-w>l` move around in the windows

`:cl[ose]` or `<C-w>c` - close active window
`:on[ly]` or `<C-w>o` - keep the active window, closing the others

`<C-w>=` - equalize all windows
`<C-w>_` - maximize height of the active window
`<C-w>|` - maximize width of the active window



### Exercise 41: Split a line of text into multiple rows

turn

4,5,6,7,8,9,10,11,12,13

into

4,
5,
6,
7,
8,
9,
10,
11,
12,
13

use `s/,/,\r/g` if there is no space following delimiter
use `s/,\s*/,\r/g` if there is empty space following delimiter



### Exericse 42: Work with terminal

`<C-z>` to suspend vim and go to foreground shell
`fg` or `<C-g>` to return to vim



### Exericse 43: Command Line History

Note:
command line window is like other windows. Once you have made an edit, hit enter and it can be executed.
This is convenient for quickly re-executing a previously run command or execute a modified command.

`q/` - open the command line window of search history
`q:` - open the command line window of Ex command history
`<C-cc>` - exit command line window (or `:exit`, or `<C-w>c`)



### Exericse 44: Run Shell Commands in Vim Command Line

Add `!` for one-off command
`!ls`
`!pwd`

`write !sh` - pass the contents of the buffer as input to the `sh` command
`write! sh` - `write!` overwrite the contents of the buffer to a file called `sh`

sort the following data shell commands inside vim

```csv
jane,doe,jane@example.com
first_name,last_name,email
drew,neil,drew@vimcasts.org
john,smith,john@example.com
```

first select the lines, then `!sort -t',' -k2`
`:'<'>!sort -t',' -k2`

### Exercise 45: Join and Reflow

```text

This is the first line.
This is the second line.
This is the third line

```

turn it into this

```text
This is the first line. This is the second line. This is the third line
```

Notes:

1. `<S-v>` to select the first line
2. `2j` to select remaining two lines
3. `gw` to reflow the three lines into a paragrah

Alternatively:
`gwip` - reflow (joining lines) for the entire paragraph (three lines)

`J` - join line below to current line with one space in between.
`gJ` - join line below to current line without space in between lines.

### Exercise 47: Debugging in Neovim

`<leader>co` - continue
`<leader>sv` - [s]tep o[v]er
`<leader>si` - [s]tep [i]nto
`<leader>su` - [s]tep o[u]t
`<leader>tb` - [t]oggle [b]reakpoint
`<leader>db` - set breakpoint
`<leader>or` - [o]pen [r]epl
`<leader>rl` - [r]un [l]ast
`<leader>dt` - [d]ebugger [t]erminate

`:BDCPP` - run before debugging C++
`:BDC` - run before debugging C

### Exercise 50: Operate with a search motion

There is this text, delete the part "take time but eventually".

```
This phrase takes time but
eventually gets to the point.
```

`v` - enter into character-wise visual mode
`/ge<CR>` - highlight 'til the word 'gets'
`h` - moves back 1 char
`d` - deletes the content

Here is a quicker way of doing the same thing:

`d/ge<CR>` - does the whole thing in 1 move

### Exercise 51: Trace your selection with precision text objects

Let's say there is this JS snippet:

```javascript
var tpl = ['<a href="{url}">{title}</a>'];
```

`vi}` - enter into visual mode, select inside }
`a"` - select including "
`i>` - select inside angle bracket
`it` - select inside tag
`at` - select at tag, or the whole tag
`a]` - select inside square bracket

Exercise:

`ci"#<Esc>` - change the url to #
`cit click here<Esc>` - change the {title} to 'click here'

### Exercise 52: Jump between matching parentheses

Let's say there is this console statement:

```javascript
console.log([{ a: 1 }, { b: 2 }]);
```

Start on the first opening paren
`%` - jumps to the closing paren
`h` - select the last ']' bracket
`%` - jump to the first '[' bracket
`l` - select the first curly '{'
`%` - jump to the last curly

```ruby
%w{London Berlin New\ York}
```

`dt{` - deletes the '%w' part
`%` - jumps to the closing curly
`r]` - replace curly with square bracket
`tick tick` - jumps to the first curly
`r[` - replaces the opening curly with square bracket

### Exercise 53: Mark Your Place and Snap Back to It

`m{a-zA-Z}` - marks the location of the cursor

`:18` - go to the 18th row
`ma` - mark the line
`G` - go to the bottom of the page
`'a` - jump back to the mark

_Built in marks_

`'.` - location of last change
`'^` - location of last insert
`'[` - start of last change or yank
`']` - end of last change or yank
`'<` - start of last visual selection
`'>` - end of last visual selection

### Exercise 55: Traverse the jump list

Certain Vim movements add entries the jump list.
`G`, `gg`, `[number]G`, `/`,`?`, `n`, `N`, `%`, `(`, `)`, `{`, `}`, `:s`, `L`, `M`, `H` will add to the jump list.

```text

Metropolitan New Orleans is under a hurricane watch, according to the National Hurricane Center.

Lake Maurepas and Lake Pontchartrain are also included in the hurricane watch. A hurricane warning is still in effect on the Louisiana coast from Cameron to Grand Isle.

Francine was still classified as a tropical storm at 5 p.m. with 65 mph maximum sustained winds.

The storm is about 135 miles east of the mouth of the Rio Grande and 360 miles southwest of Morgan City, Louisiana, moving northeast at 10 mph.

Francine is expected to strengthen into a hurricane tonight before landfall in Louisiana tomorrow. It is expected to quickly weaken after making landfall.

"After landfall, the center is expected to move northward into Mississippi on Wednesday night or Thursday," the hurricane center said.

```

`<C-o>` - is like the browser's back button, but here it's used for files
`<C-i>` - is like the browser's forward button

`:jumps` - will list all the different jump points

### Exercise 56: Traverse the change list

`:changes` - will list all the changes during an editing session

`g;` - traverse backward the changelist
`g,` - traverse forward the changelist

`backtic .` - moves you to the last change
`backtic ^` - moves you to the last insertion
`gi` - live insert mode, move around, this takes you back to insert mode where I left off

### Exercise 58: Snap between files using global marks

```text
Metropolitan New Orleans is under a hurricane watch, according to the National Hurricane Center.

Lake Maurepas and Lake Pontchartrain are also included in the hurricane watch.
A hurricane warning is still in effect on the Louisiana coast from Cameron to Grand Isle.

Francine was still classified as a tropical storm at 5 p.m. with 65 mph maximum sustained winds.
The storm is about 135 miles east of the mouth of the Rio Grande and 360 miles southwest of Morgan City, Louisiana, moving northeast at 10 mph.

Francine is expected to strengthen into a hurricane tonight before landfall in Louisiana tomorrow. It is expected to quickly weaken after making landfall.

"After landfall, the center is expected to move northward into Mississippi on Wednesday night or Thursday," the hurricane center said.

```

While `m{a-z}` sets a local mark in the current file
`m{A-Z}` - sets a global mark

- `vs 01_` - open the 01\_ markdown file
- `:10` - go to the 10th line
- `mA` - mark the position there
- switch back to this file
- `backticA` - takes you back to the file's location

- y`a - yank text to the position of mark a
- `backtick 0` - go to the position where Vim was previously exited`bactick "` - go to the position where you last edited this file`backtick .` - go to the position where you last changed this file`backtick backtick` - go to the position before the last jump

`:vimgrep /cursor/ **` - searches for the word in the current dir,
takes you there
`:cn` - takes you to next result
`:cp` - take you to previous result

### Exercise 59: Delete yank and put with unnamed register

Let's say we made a mistake of typing this text:

```
Practica lvim
```

Start on the last character 'm'
`F space` - to search for space backwards
`x` - to cut
`p` - to paste

`xp` - transpose two chars

Similar concept can be used for lines

```
2) line two
1) line one
3) line three
```

Start on the first line
`dd` - to cut out the line
`p` - to insert

`ddp` - to transpose lines
`yyp` - to duplicate lines

Using the unnamed register

```javascript
collection = getCollection();
process(somethingInTheWay, target);
```

- `yiw` - yanks the word collection into the register
- `jww` - moved to the beginning of "somethingInTheWay"
- `dw` - deletes the word
- `P` - pastes before comma

But oops, try this instead of `dw`
`"_de` - deletes the word, but does not put it into register

`"_d{motion}` - deletes the word without putting it into the register

### Exercise 60: Grok Vim registers

Given this text

```text
1) This is the first block of text
2) Another block of text
```

- `"ayy` - will yank the first line into register "a"
- `"byy` - yank the 2nd line into register "b"
- `"bp` - paste in from register "b" first
- `"ap` - paste in from register "a" after

Use the yank register to fix the text from previous kata

```javascript
collection = getCollection();
process(somethingInTheWay, target);
```

`yiw` - to yank the word into yank register
`jww` - to go to next line to the beginning of "somethingInTheWay"
`dw` - will delete the word
`"0P` - will insert the word from the yank register

`:reg "0` - will inspect the yank and unnamed registers

`"_` - is the black hole register, nothing returns from there

`"+` - system clip board
`"*` - system selection

Visual select this entire doc, yank its content into `"+yy`, go to
Pages and insert it into a new document there

`"=` - expressions register

`i` - switch to insert mode
`<C-r>=` - switches to expression register
`6*35<CR>` - will provide the text "210" and drop back into insert mode

More registers

`<C-r>%` - name of the current file
`<C-r>#` - name of the alternate file
`<C-r>.` - last inserted text
`<C-r>0` - paste from the yank register while in insert mode

Notes:
Access registers using `"`
Access marks using `backtick`

10 Vim Register types

- The unnamed register (""). - by default, you paste from the unnamed register
- The numbered registers ("0-9). - `"0` is the yank register
- The small delete register ("-).
- The named registers ("a-z).
- The read-only registers (":, ".,and "%).
- The alternate file register ("#).
- The expression register ("=).
- The selection registers ("\* and "+).
- The black hole register ("\_).
- The last search pattern register ("/).

Try turn above into this

     1	The unnamed register ("").
     2	The numbered registers ("0-9).
     3	The small delete register ("-).
     4	The named registers ("a-z).
     5	The read-only registers (":, ".,and "%).
     6	The alternate file register ("#).
     7	The expression register ("=).
     8	The selection registers ("* and "+).
     9	The black hole register ("_).
    10	The last search pattern register ("/).

To accomplish this:

1. `<S-v>` select a line
2. `9j` to select all 10 lines
3. `:!nl -ba` - `nl` is unix command to number lines, `-ba` means all lines including blank lines
4. alternatively, `:!cat -n`

to generate a list of numbers
- `:0put=range(1,10)` - put 1 to 10 at the top of the file
- `:$put=range(0,10)` - put 1 to 10 at the bottom of the file

### Exericse 61: Replace visual selection with a register

There is an easier way to swap the word "somethingInTheWay" with "collection"

```javascript
collection = getCollection();
process(somethingInTheWay, target);
```

- `yiw` - to yank the word into the yank register
- `jww` - to move to 's' char in "somethingInTheWay"
- `ve` - visually selects the entire word
- `p` - will insert the yanked word over the visually selected text

Another exercise: swap the 2 words "chips" and "fish"

I like chips and fish.

Start on 'I'
- `fc` - find the first word to swap
- `de` - delete the word
- `mm` - mark the place
- `ww` - move to 'f' in "fish"
- `ve` - visually select the word
- `p` - paste the word over "fish"
- `backtickm` - to take back to the mark position
- `P` - to insert the word fish

### Exericse 62: Pasting from a register

Use the yank register to fix this:

```javascript
collection = getCollection();
process(somethingInTheWay, target);
```

- `yiw` - yank the word into the yank register
- `jww` - move down 1 line to 'somethingInTheWay'
- `ciw<C-r>0` - insert the text from the yank register

Duplicate the `<tr>` tag content

```html
<table>
  <tr>
    <td>keystrokes</td>
    <td>buffer contents</td>
  </tr>
</table>
```

- `yap` - yanks the paragraph
- `5j` - move down 5 lines
- `gP` - insert above

### Exercise 63: Record and Execute a Macro

Given this text:

```javascript
foo = 1;
bar = "a";
foobar = foo + bar;
```

Start on the first line
- `qa` - start recording your macro in the "a" register
- `A;` - append semicolon at the end of the line
- `Ivar<Space><Esc>` - add "var" to the beginning of the line
- `q` - quit recording the macro

Inspect what's in register a with `:reg a`

`@{register}` - will replay the macro

- `j` - go to next line
- `@a` - replay it on second line
- `j@@` - replay it on the next line

### Exercise 64: Play Back with a Count

Make this text:

```javascript
var x = "(" + a + "," + b + "," + c + "," + d + "," + e + ")";
```

Look like this:

```javascript
var x = "(" + a + "," + b + "," + c + "," + d + "," + e + ")";
```

- `f+` - find the first "+"
- `s<Space>+<Space><Esc>` - add spaces around "+"
- `qq;.q` - record the `;.` keystrokes in the q register
- `22@q` - run the macro 22 times, it's OK to run it more

### Exercise 65: Repeat a Change on Contiguous Lines

Given this text:

```
1. one
2. two
3. three
4. four
5. five
```

Change it to be like this:

```
1) One
2) Two
3) Three
4) Four
5) Five
```

- `qa` - record the macro in the "a" register
- `0f.` - find the dot on the first line
- `r)` - replace the dot with a ")"
- `w~` - title-case the word
- `j` - move down 1 line
- `q` - quit recording the macro

We can replay the macro with this:
`@a` - and `@@` after that

But what if there is line barrier in the text like this?

```
1. one
2. two
3. three
// Some comment
4. four
5. five
```

Replay it with the highlighted text:
- `'<,'>norm @a` - this will replay the macro from the "a" register on the highlighted lines

### Exercise 66: Append Command to Macro

Let's say we recorded this macro:

```text
1. one
2. two
3. three
4. four
```

- `qa` - record in "a" register
- `0f.r)w~` - replace "." with ")" and tile-case word
- `q` - quit recording macro

We forgot adding the "j" to move to the next line.

Inspect what got recorded:

`:reg a` - look at what's in "a" register

- `qA` - append to the macro recorded in "a" register
- `j` - move to next line
- `q` - quit recording the macro

Look at it again, you should have the "j" at the end

### Exercise 67: Act Upon a Collection of Files

- `:cd ruby_module` - move into the "ruby_module" dir
- `:args *.rb` - open all the .rb files there
- `:args` - review all the files
- 
- `:first` - move to the first
- `:last` - move to the last

Start on the first one
- `qa` - record the macro into "a" register
- `gg/class<CR>` - find the "class" word
- `Omodule Rank` - add the "module Rank" above
- `j>G` - indent the file
- `Goend<Esc>` - add the "end" to the bottom
- `q` - end recording the macro

-`:edit!` - undo all edits of the first file
-`:argdo normal @a` - run the macro in parallel
-`qA` - append to the previously recorded macro
-`:next` - go to the next file in buffer
-`q` - quit recording
-`22@a` - repeat the macro 22 times - in series

Executing the macro in series might be slower, but if error occurs, it stops on the file where the error is.

### Exercise 68: Evaluate an iterator to number items in a list

Change this text:

```shell
partridge in a pear tree
turtle doves
French hens
calling birds
golden rings
```

to:

```shell
1) partridge in a pear tree
2) turtle doves
3) French hens
4) calling birds
5) golden rings
```

Use the expression register to do the loop
- `:let i=1` - set the i var to 1
- `qa` - record the the macro in the 'a' register
- `I<C-r>=i<CR>)<Esc>` - insert the value of i
- `let i += 1` - increment i by 1
- `q` - finish recording the macro

`:'<,'>norm @a` - execute the macro on the visual selection in parallel

### Exercise 69: Edit the contents of a macro

```text
1. One
2. Two
3. three
4. four
```

Some of the lines use capital letter, `~` would just switch casing, we need to use `vU` here, which makes the char upper-cased at the cursor.

This is what is should look like after your changes:

```test
1) One
2) Two
3) Three
4) Four
```

- `:put a` - paste the content of register a into the doc
- Edit the macro by replacing `~` with `vU`
- Remove the last J, as it will be added back
- `"add` - replaces the current line with register a

Characterwise yank is a safer bet, try this instead:
- `0` - go back to the first char in line
- `"ay$` - yank the content of the line
- `dd` - delete the line



### Exercise 70: Tune the case sensitivity of search patterns

Here is a small text snippet to search on:

```
foo
foo & foo
foo & Foo
FOO & foo
```

Setting case sensitivity per search:
- `/foo` - Search for the word "foo"
- `/foo\C` - Search for the word "foo", case sensitive
- `/foo\c` - Search for the word "foo", case insensitive

- `set smartcase` - cancels out of case insensitive search when first upper-cased character is typed

### Exercise 71: Use the \v pattern switch for regex search

Let's use this snippet of CSS:

```css
body {
  color: #3c3c3c;
}
a {
  color: #0000ee;
}
strong {
  color: #000;
}
```

- `/#\([0-9a-fA-F]\{6}\|[0-9a-fA-F]\{3\}\)` - this regex will match all the hex values

The `\v` switch make Vim's regex search like Perl, Python and Ruby.

- `/\v#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})` - the search works the same way, but it does not need to escape the special characters.
- `/\v#(\x{6}|\x{3})` - will be the same as above, but it's using `\x` character class



### Exercise 72: Use the \v literal switch for verbatim search

Use this excerpt of text:

```
The N key searches backwards...
... the \v pattern swtich (a.k.a. very magic search)...
```

- `/a.k.a.` - will match more than 1 result
- `/a\.k\.a\.` - will find the right word, but escaping the dots is a lot of work
- `/\Va.k.a.` - turns off all special char in regex, only backslash is escaped

General rule:
If you search for a regular expression use the `\v`, if you want to search for
verbatim text, use the `\V` switch.

### Exercise 73: Stake the boundaries of a word

```
the problem with these new recruits is that
they don't keep their boots clean.
```

- `/the` - will yield results with words where "the" is embedded, like "they"
- `/\v<the>` - will find only the exact macthes

The `<` and `>` are zero-width items, they represent boundaries.

`/\<the\>` - will match the angle brackets as chars

### Exercise 74: Stake the boundaries of a match

Sometimes we might want to specify a broad pattern, then focus on a subset
of that match. Vim's `\zs` and `\ze` items allow just to do that.

```text
Practical Vim is really a great book.
```

`/Practical Vim<CR>` - will match the word "Practical Vim"
`/Practical \zsVim<CR>` - will match the "Vim" from the matches

```test
Match "quoted words" not quote marks.
```

`/\v"[^"]+"` - matches the word with quotes (`[^"]+` - match anything that's not a quote mark)
`/\v"\zs[^"]+\ze"` - matches words inside the quote



### Exercise 75: Escape Problem Characters

```text
Search items: [http://vimdoc.net/search?q=/\\][s]
...
[s]: http://vimdoc.net/search?q=/\\
```

- `"uyi[` - yank the url into register 'u'
- `/\V<C-r>u<CR>` - to populate the search field

We could escape the backslash, but that's tedious.

Vim will search forward with `/` character, but with `?` it searches backwards.

`?http://vimdoc.net/search?q=/\\` - will match everything until the '?'




### Exercise 76: Meet the Search Command

```text
Going to Union Station takes time,
but this time can be an advantage.
Use it right, and travelling time
will pay off.
```

- `/time` - search for time forward
- `?time` - search for time backwards
- `n` - go to the next result
- `N` - go to the previous result - it always goes in the opposite direction
- `/<CR>` - will execute the last search forward
- `?<CR>` - will execute the last search backwards

Use the "Up" button to browse search history.

Notes:
search through regular expression
- `+`, `{}` must be escaped, unless you add `\v` in your search

- `/d.g` - matches dog, dig, dug, etc.
- `/a\+` or `/\va+` - matches one or more a
- `/a*` - matches zero or more a
- `/z\{2,5\}` or `/\vz{2,5}`- matches z 2 to 5 times
- `/^donut` - matches 'donut' at the start of the line
- `/donut$` - matches 'donut' at the end of the line




### Exercise 77: Regex in Vim

PCRE - Perl Compatible Regular Expression

```text
PCRE - Perl Compatible Regular Expression
The quick brown fox jumps over the lazy dog. Dogs have been domesticated for thousands of years, serving as loyal companions to humans.
A dog's bark can vary from a soft woof to a loud howl.
In the doghouse again, Tom sighed. He wished he could doggedly pursue his dreams without distractions.
Meanwhile, his neighbor's hotdog stand was doing brisk business.
The archaeology team unearthed ancient dogma tablets, shedding light on long-forgotten beliefs.
"Underdog stories always inspire me," said Sarah, while petting her Labrador.
The local dog park was crowded with various breeds: bulldogs, poodles, and even a rare Rhodesian Ridgeback.
John's dog-eared copy of "To Kill a Mockingbird" lay on the nightstand, a testament to frequent reading.
In the distance, a dog sled team practiced for the upcoming Iditarod race.
Remember: every dog has its day!
509-333-5515
somebody@someaddress.com
```

Meta Characters

- `.` - match any character except `\n`
- `|` - match either side of exppression
- `\d, \w, \s` - digits (0-9), alphanumericas (a-Z,0-9, underscores), whitespace respectively
- `\D, \W, \S` - inverse sets of above
- `*` - matches preceding char or group zero or more times
- `?` - matches preceding char or group zero or one times
- `+` - matches preceding char or group one or more times
- `+?` - lazy (non-greedy) matching (match 1 or more times, as few as possible) 
    - e.g., `<em> yes </em>` - `<.+>` will match the entire thing, `<.+?>` will only match the tags
- `*?` - lazy (non-greedy) matching (match 0 or more times, as few as possible)
- `{m}, {m, n}` - matches preceding char/group exactly m times, at least m times and at most n times respectively
- `^, $` - beginning, end of line respectively
- `[]` - matches any of the specified char in the square bracket
- `()` - matches character inside parens as a group
- `[^a-c]` - matches all chars except a, b, c

Examples (+, {} must be escaped unless `\v` is added)

- `/\v<d.g>` - matches dog, dig, dug... (`<>`- word boundaries, i.e., matches d.g as a separate word)
- `/\va+` - matches one or more `a`
- `/a*` - matches zero or more `a`
- `/\vz{2,5}` - matches z 2 to 5 times
- `/^donut` - search 'donut' at the start of the line
- `/donut$` - search 'donut' at the end of the line

use `\` to match meta characters as literal characters. Because `Vim` regex engine requires escaping inconsistently,  
for example, `\(, \)` to match grouping, always add `\v` to the beginning of your vim regex if you want consistent escaping like PCRE.  
If you add `\V`, all meta characters are treated as literal characters.

- `[^abc]` - matches every char except a, b, or c
- `\w` - word chars, equal to [0-9A-Za-z_]
- `\d` - digits, equal to [0-9]
- `%^` - match the beginning of the file
- `%$` - match the end of the file
- `%V` - match only inside what is selected in the visual mode
- `\n` - match an end-of-line.
- `\_` - prefix to mean multi-line matching
- `\_.` - matches any char including end of lines
- `\_[]` - matches a char class as well of end of lines
- `\_^` - matches any start-of-line; not only for the current line, but any other line included in the match
- `\_$` - matches any end-of-line; not only for the current line, but any other line included in the match

POSIX Character Class

- `[[:alnum:]]` => `[a-zA-Z0-9]`
- `[[:alpha:]]` => `[a-zA-Z]`
- `[[:digit:]]` => `[0-9]`
- `[[:lower:]]` => `[a-z]`
- `[[:upper:]]` => `[A-Z]`
- `[[:blank:]]` => `[ \t]` space and tab
- `[[:punct:]]` => punctation chars except letters and digits
- `[[:space:]]` => white space chars (space, tab, new line, return, form feed, NL, vertical tab)
- `[[:xdigit:]]` => hex digits

Backrefence

- `:%s/\v\d\d(\d\d)/19\1` - `\1` replaces the first group (i.e., the last two digits) with 19

Word Boundaries

- `\b` - word boundaries in PCRE (a-zA-Z0-9\_)
- `\B` - non word boundaries in PCRE (anything that is not included above: spaces, punctuation, special chars, tab, newlines...)
- `<>` - word boundaries in `Vim`, e.g., `<vim>` matches `vim` independently not as substring

Greedy

- `/\vname\=".*"` - matches the entire string `name="twitter:card" content="summary_large_image"`
- `/\vname\=".*?"` - matches only `name="twitter:card"`
- `{-}` - non-greedy version of `*`
- `{-1,}` - non-greedy version of `+`

Start and End of Matched Pattern

- `\zs` - the pattern before it will need to be in the text but not matched - `/\v"application\/\zs.{-1,}"` - everything after `zs` will be matched but `application/` needs to be in the text. - `{-1,}` is the non-greedy equivalent of `+`
- `\ze` - the pattern after it will be need to be in the text but not matched

Others

- `.+1` - move cursor one line below. `/v{ .+1,}` matches the following (`,` indicates a range)

```css
html {
  //some rules
}
```

Look Behind and Look Ahead

- `(pattern) @<= (matched)` - matched only if pattern precedes it -- PCRE equivalent: `(?<= pattern) matched`
- `(pattern) @<! (matched)` - matched only if pattern does not precede it -- PCRE equivalent: `(?<! pattern) matched`
- `(matched) @= (pattern)` - matched only if pattern follows it -- PCRE equivalent: `matched(?= pattern)`
- `(matched) @! (pattern)` - matched only if pattern does not follow it -- PCRE equivalent: `matched(?! pattern)`

Example
`/\v\w@<=d.g\w` - match 'dog' inside another word

![regex](regex.png)







### Exercise 78: Offset cursor to the end of a search match

Use this text as an example:

```text
Aim to learn a new programming lang each year.
Which lang did you pick up last year?
Which langs would you like to learn?
```

Task: replace "lang" with "language".

`{start} on A of Aim` - initial position
`/lang/e<CR>` - find the word 'lang'
`auage<Esc>` - add "uage" to "lang"
`n.n.` - repeat it twice

### Exercise 79: Operate on complete search match

Make this:

```ruby
class XhtmlDocument < XmlDocument; end
class XhtmlTag < XmlTag; end
```

to be like this:

```ruby
class XHTMLDocument < XMLDocument; end
class XHTMLTag < XMLTag; end
```

One possible solution:
`/\vX(ht)?ml\C<CR>` - find the items to change
`gU//e<CR>` - make the text uppercase - we use '//e' as a motion
`//<CR>` - move to next item
`.` - rerun the command
`//<CR>.` - move to next item and rerun the command

### Exercise 80: Create complex patterns by iterating upon search history

Change the single quotes to double quotes.

```
This string contains a "quoted" word.
This string contains "two" quoted "words".
This "string doesn't make things easy".
```

- `/\v".+"` - will match everything in single quote, quote included
- `/<Up>` - Use search history get this search string back
- `/\v"[^"]+` - this will be better, but not perfect
- Use search history again
- `/\v"([^"]|"\w])+"` - this should be an even better match
- `q/` - let's use the search command-line window
- Find this search: `/\v"[^"]+` - to edit
- `f[` - jump to the first square bracket
- `c%(<C-r>")<Esc>` - cut and paste + insert parens
- `i|'\w<Esc>` - inserts the remaining search

We want to capture everything in the quotes, wrap it in parens
- `/\v'(([^']|'\w)+)'` - this is perfect
- `:%s//'\1'/g` - replace double quotes with single quotes by using a %1 capture register




